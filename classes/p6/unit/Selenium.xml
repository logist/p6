<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="21">
<Class name="p6.unit.Selenium">
<Description>
Selenium remote control class</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>60794,48374.237191</TimeCreated>

<Property name="ServerHost">
<Type>%String</Type>
<InitialExpression>"localhost"</InitialExpression>
</Property>

<Property name="ServerPort">
<Type>%String</Type>
<InitialExpression>"4444"</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
//Property BrowserStartCommand As %String [ InitialExpression = "*custom c:\Program Files\Internet Explorer\iexplore.exe" ];

]]></Content>
</UDLText>

<Property name="BrowserStartCommand">
<Type>%String</Type>
<InitialExpression>"*iexplore"</InitialExpression>
</Property>

<Property name="BrowserUrl">
<Type>%String</Type>
<InitialExpression>"http://localhost/"</InitialExpression>
</Property>

<Property name="SessionId">
<Type>%String</Type>
</Property>

<Method name="%OnClose">
<Description>
При закрытии объекта закрыть сессию Selenium</Description>
<Private>1</Private>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ..SessionId]"" $$$QuitOnError(..Stop())
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Start">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..SessionId=..GetString("getNewBrowserSession",$lb(..BrowserStartCommand,..BrowserUrl))
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Stop">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..SelectWindow()
	do ..Open("http://localhost/csp/"_$zcvt($znspace,"L")_"test/zui.admin.Login.cls?IsFinishSession=1")
	do ..DoCommand("testComplete")
	set ..SessionId=""
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DoCommand">
<FormalSpec>aCommand:%String,aArg:%List=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set getStr="GET /selenium-server/driver/?cmd="_aCommand
	
	for i=1:1:$ListLength(aArg) {
		set getStr=getStr_"&"_i_"="_$zcvt($zcvt($listget(aArg,i),"O","UTF8"),"O","URL")
	}

	set:..SessionId]"" getStr=getStr_"&sessionId="_..SessionId
	
	set getStr=getStr_" HTTP/1.0"

	set Request=##class(%IO.Socket).%New()
	set Request.Host=..ServerHost
	set Request.Port=..ServerPort
	do Request.Open(,,2,.sc)
	
	if 'sc zt "CONNECT"
	
	do Request.WriteLine(getStr)
	do Request.WriteLine()
	
	for  {
		set data=Request.ReadLine(,2,.sc)
		quit:($a(data)=13)||('sc)
	}


	set io=$io
	use Request.Name:(::"-S")
	read data:1
	use io
	
	do Request.Close()

	set data=$zcvt(data,"I","UTF8")
	
	if $e(data,1,2)'="OK" set %p6error=$$$ERROR(10000,"Ошибка Selenium: "_data) zt "TEST"
	
	quit data
]]></Implementation>
</Method>

<Method name="Do">
<FormalSpec>aCommand:%String,aArgs:%List=""</FormalSpec>
<Implementation><![CDATA[
	set result=..DoCommand(aCommand,$lb(p1,p2,p3,p4,p5,p6,p7))
	if result["OK" quit $$$OK
	quit $$$ERROR(10000,result)
]]></Implementation>
</Method>

<Method name="GetString">
<FormalSpec>aCommand:%String,aArgs:%List=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=..DoCommand(aCommand,aArgs)
	quit $e(result,4,99999)
]]></Implementation>
</Method>

<Method name="GetStringList">
<FormalSpec>aCommand:%String,aArgs:%List=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set string=..GetString(aCommand,aArgs)
	set result=""
	for i=1:1:$length(string,"\,") {
		set result=result_$listbuild($piece(string,"\,",i))
	}
	quit result
]]></Implementation>
</Method>

<Method name="GetBoolean">
<FormalSpec>aCommand:%String,aArgs:%List=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=..GetString(aCommand,aArgs)
	quit result="true"
]]></Implementation>
</Method>

<Method name="GetBooleanList">
<FormalSpec>aCommand:%String,aArgs:%List=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set string=..GetString(aCommand,aArgs)
	set result=""
	for i=1:1:$length(string,"\,") {
		set result=result_$listbuild($piece(string,"\,",i)="true")
	}
	quit result
]]></Implementation>
</Method>

<Method name="Click">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Clicks on a link, button, checkbox or radio button. If the click action
        causes a new page to load (like a link usually does), call
        waitForPageToLoad.
        
        'locator' is an element locator
        */
        quit ..DoCommand("click", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="AddLocationStrategy">
<FormalSpec>strategyName,functionDefinition</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        """
        Defines a new function for Selenium to locate elements on the page.
        For example,
        if you define the strategy "foo", and someone runs click("foo=blah"), we'll
        run your function, passing you the string "blah", and click on the element 
        that your function
        returns, or throw an "Element not found" error if your function returns null.
        
        We'll pass three arguments to your function:
        
        *   locator: the string the user passed in
        *   inWindow: the currently selected window
        *   inDocument: the currently selected document
        
        
        The function must return null if the element can't be found.
        
        'strategyName' is the name of the strategy to define; this should use only   letters [a-zA-Z] with no spaces or other punctuation.
        'functionDefinition' is a string defining the body of a function in JavaScript.   For example: ``return inDocument.getElementById(locator);``
        """
        */
        quit ..DoCommand("addLocationStrategy", $listbuild(strategyName,functionDefinition,))
]]></Implementation>
</Method>

<Method name="DoubleClick">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Double clicks on a link, button, checkbox or radio button. If the double click action
        causes a new page to load (like a link usually does), call
        waitForPageToLoad.
        
        'locator' is an element locator
        */
        quit ..DoCommand("doubleClick", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="ClickAt">
<FormalSpec>locator,coordString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Clicks on a link, button, checkbox or radio button. If the click action
        causes a new page to load (like a link usually does), call
        waitForPageToLoad.
        
        'locator' is an element locator
        'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.
        */
        quit ..DoCommand("clickAt", $listbuild(locator,coordString,))
]]></Implementation>
</Method>

<Method name="DoubleClickAt">
<FormalSpec>locator,coordString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Doubleclicks on a link, button, checkbox or radio button. If the action
        causes a new page to load (like a link usually does), call
        waitForPageToLoad.
        
        'locator' is an element locator
        'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.
        /*/
        quit ..DoCommand("doubleClickAt", $listbuild(locator,coordString,))
]]></Implementation>
</Method>

<Method name="FireEvent">
<FormalSpec>locator,eventName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Explicitly simulate an event, to trigger the corresponding "on\ *event*"
        handler.
        
        'locator' is an element locator
        'eventName' is the event name, e.g. "focus" or "blur"
        /*/
        quit ..DoCommand("fireEvent", $listbuild(locator,eventName,))
]]></Implementation>
</Method>

<Method name="KeyPress">
<FormalSpec>locator,keySequence</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates a user pressing and releasing a key.
        
        'locator' is an element locator
        'keySequence' is Either be a string("\" followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: "w", "\119".
        /*/
        quit ..DoCommand("keyPress", $listbuild(locator,keySequence,))
]]></Implementation>
</Method>

<Method name="ShiftKeyDown">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Press the shift key and hold it down until doShiftUp() is called or a new page is loaded.
        
        /*/
        quit ..DoCommand("shiftKeyDown", $listbuild())
]]></Implementation>
</Method>

<Method name="ShiftKeyUp">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Release the shift key.
        
        /*/
        quit ..DoCommand("shiftKeyUp", $listbuild())
]]></Implementation>
</Method>

<Method name="MetaKeyDown">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Press the meta key and hold it down until doMetaUp() is called or a new page is loaded.
        
        /*/
        quit ..DoCommand("metaKeyDown", $listbuild())
]]></Implementation>
</Method>

<Method name="MetaKeyUp">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Release the meta key.
        
        /*/
        quit ..DoCommand("metaKeyUp", $listbuild())
]]></Implementation>
</Method>

<Method name="AltKeyDown">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Press the alt key and hold it down until doAltUp() is called or a new page is loaded.
        
        /*/
        quit ..DoCommand("altKeyDown", $listbuild())
]]></Implementation>
</Method>

<Method name="AltKeyUp">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Release the alt key.
        
        /*/
        quit ..DoCommand("altKeyUp", $listbuild())
]]></Implementation>
</Method>

<Method name="ControlKeyDown">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Press the control key and hold it down until doControlUp() is called or a new page is loaded.
        
        /*/
        quit ..DoCommand("controlKeyDown", $listbuild())
]]></Implementation>
</Method>

<Method name="ControlKeyUp">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Release the control key.
        
        /*/
        quit ..DoCommand("controlKeyUp", $listbuild())
]]></Implementation>
</Method>

<Method name="KeyDown">
<FormalSpec>locator,keySequence</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates a user pressing a key (without releasing it yet).
        
        'locator' is an element locator
        'keySequence' is Either be a string("\" followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: "w", "\119".
        /*/
        quit ..DoCommand("keyDown", $listbuild(locator,keySequence,))
]]></Implementation>
</Method>

<Method name="KeyUp">
<FormalSpec>locator,keySequence</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates a user releasing a key.
        
        'locator' is an element locator
        'keySequence' is Either be a string("\" followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: "w", "\119".
        /*/
        quit ..DoCommand("keyUp", $listbuild(locator,keySequence,))
]]></Implementation>
</Method>

<Method name="MouseOver">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates a user hovering a mouse over the specified element.
        
        'locator' is an element locator
        /*/
        quit ..DoCommand("mouseOver", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="MouseOut">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates a user moving the mouse pointer away from the specified element.
        
        'locator' is an element locator
        /*/
        quit ..DoCommand("mouseOut", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="MouseDown">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates a user pressing the mouse button (without releasing it yet) on
        the specified element.
        
        'locator' is an element locator
        /*/
        quit ..DoCommand("mouseDown", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="MouseDownAt">
<FormalSpec>locator,coordString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates a user pressing the mouse button (without releasing it yet) on
        the specified element.
        
        'locator' is an element locator
        'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.
        /*/
        quit ..DoCommand("mouseDownAt", $listbuild(locator,coordString,))
]]></Implementation>
</Method>

<Method name="MouseUp">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates a user pressing the mouse button (without releasing it yet) on
        the specified element.
        
        'locator' is an element locator
        /*/
        quit ..DoCommand("mouseUp", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="MouseUpAt">
<FormalSpec>locator,coordString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates a user pressing the mouse button (without releasing it yet) on
        the specified element.
        
        'locator' is an element locator
        'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.
        /*/
        quit ..DoCommand("mouseUpAt", $listbuild(locator,coordString,))
]]></Implementation>
</Method>

<Method name="MouseMove">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates a user pressing the mouse button (without releasing it yet) on
        the specified element.
        
        'locator' is an element locator
        /*/
        quit ..DoCommand("mouseMove", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="MouseMoveAt">
<FormalSpec>locator,coordString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates a user pressing the mouse button (without releasing it yet) on
        the specified element.
        
        'locator' is an element locator
        'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.
        /*/
        quit ..DoCommand("mouseMoveAt", $listbuild(locator,coordString,))
]]></Implementation>
</Method>

<Method name="Type">
<FormalSpec>locator,value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Sets the value of an input field, as though you typed it in.
        
        Can also be used to set the value of combo boxes, check boxes, etc. In these cases,
        value should be the value of the option selected, not the visible text.
        
        
        'locator' is an element locator
        'value' is the value to type
        /*/
        quit ..DoCommand("type", $listbuild(locator,value,))
]]></Implementation>
</Method>

<Method name="SetSpeed">
<FormalSpec>value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Set execution speed (i.e., set the millisecond length of a delay which will follow each selenium operation).  By default, there is no such delay, i.e.,
        the delay is 0 milliseconds.
        
        'value' is the number of milliseconds to pause after operation
        /*/
        quit ..DoCommand("setSpeed", $listbuild(value,))
]]></Implementation>
</Method>

<Method name="GetSpeed">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Get execution speed (i.e., get the millisecond length of the delay following each selenium operation).  By default, there is no such delay, i.e.,
        the delay is 0 milliseconds.
        
        See also setSpeed.
        
        /*/
        quit ..DoCommand("getSpeed", $listbuild())
]]></Implementation>
</Method>

<Method name="Check">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Check a toggle-button (checkbox/radio)
        
        'locator' is an element locator
        /*/
        quit ..DoCommand("check", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="Uncheck">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Uncheck a toggle-button (checkbox/radio)
        
        'locator' is an element locator
        /*/
        quit ..DoCommand("uncheck", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="Select">
<FormalSpec>selectLocator,optionLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Select an option from a drop-down using an option locator.
        
        
        Option locators provide different ways of specifying options of an HTML
        Select element (e.g. for selecting a specific option, or for asserting
        that the selected option satisfies a specification). There are several
        forms of Select Option Locator.
        
        *    \ **label**\ =\ *labelPattern*
            matches options based on their labels, i.e. the visible text. (This
            is the default.)
            *    label=regexp:[Oo]ther
            
            
        *    \ **value**\ =\ *valuePattern*
            matches options based on their values.
            *    value=other
            
            
        *    \ **id**\ =\ *id*
            matches options based on their ids.
            *    id=option1
            
            
        *    \ **index**\ =\ *index*
            matches an option based on its index (offset from zero).
            *    index=2
            
            
        
        
        If no option locator prefix is provided, the default behaviour is to match on \ **label**\ .
        
        
        
        'selectLocator' is an element locator identifying a drop-down menu
        'optionLocator' is an option locator (a label by default)
        /*/
        quit ..DoCommand("select", $listbuild(selectLocator,optionLocator,))
]]></Implementation>
</Method>

<Method name="AddSelection">
<FormalSpec>locator,optionLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Add a selection to the set of selected options in a multi-select element using an option locator.
        
        @see #doSelect for details of option locators
        
        'locator' is an element locator identifying a multi-select box
        'optionLocator' is an option locator (a label by default)
        /*/
        quit ..DoCommand("addSelection", $listbuild(locator,optionLocator,))
]]></Implementation>
</Method>

<Method name="RemoveSelection">
<FormalSpec>locator,optionLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Remove a selection from the set of selected options in a multi-select element using an option locator.
        
        @see #doSelect for details of option locators
        
        'locator' is an element locator identifying a multi-select box
        'optionLocator' is an option locator (a label by default)
        /*/
        quit ..DoCommand("removeSelection", $listbuild(locator,optionLocator,))
]]></Implementation>
</Method>

<Method name="Submit">
<FormalSpec>formLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Submit the specified form. This is particularly useful for forms without
        submit buttons, e.g. single-input "Search" forms.
        
        'formLocator' is an element locator for the form you want to submit
        /*/
        quit ..DoCommand("submit", $listbuild(formLocator,))
]]></Implementation>
</Method>

<Method name="Open">
<FormalSpec>url</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Opens an URL in the test frame. This accepts both relative and absolute
        URLs.
        
        The "open" command waits for the page to load before proceeding,
        ie. the "AndWait" suffix is implicit.
        
        \ *Note*: The URL must be on the same domain as the runner HTML
        due to security restrictions in the browser (Same Origin Policy). If you
        need to open an URL on another domain, use the Selenium Server to start a
        new browser session on that domain.
        
        'url' is the URL to open; may be relative or absolute
        /*/
        quit ..DoCommand("open", $listbuild(url,))
]]></Implementation>
</Method>

<Method name="OpenWindow">
<FormalSpec>url,windowID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Opens a popup window (if a window with that ID isn't already open).
        After opening the window, you'll need to select it using the selectWindow
        command.
        
        This command can also be a useful workaround for bug SEL-339.  In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the "onLoad" event, for example).
        In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using
        an empty (blank) url, like this: openWindow("", "myFunnyWindow").
        
        
        'url' is the URL to open, which can be blank
        'windowID' is the JavaScript window ID of the window to select
        /*/
        quit ..DoCommand("openWindow", $listbuild(url,windowID,))
]]></Implementation>
</Method>

<Method name="SelectWindow">
<FormalSpec>windowID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Selects a popup window; once a popup window has been selected, all
        commands go to that window. To select the main window again, use null
        as the target.
        
        Selenium has several strategies for finding the window object referred to by the "windowID" parameter.
        1.) if windowID is null, then it is assumed the user is referring to the original window instantiated by the browser).
        2.) if the value of the "windowID" parameter is a JavaScript variable name in the current application window, then it is assumed
        that this variable contains the return value from a call to the JavaScript window.open() method.
        3.) Otherwise, selenium looks in a hash it maintains that maps string names to window objects.  Each of these string 
        names matches the second parameter "windowName" past to the JavaScript method  window.open(url, windowName, windowFeatures, replaceFlag)
        (which selenium intercepts).
        If you're having trouble figuring out what is the name of a window that you want to manipulate, look at the selenium log messages
        which identify the names of windows created via window.open (and therefore intercepted by selenium).  You will see messages
        like the following for each window as it is opened:
        ``debug: window.open call intercepted; window ID (which you can use with selectWindow()) is "myNewWindow"``
        In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the "onLoad" event, for example).
        (This is bug SEL-339.)  In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using
        an empty (blank) url, like this: openWindow("", "myFunnyWindow").
        
        
        'windowID' is the JavaScript window ID of the window to select
        /*/
        quit ..DoCommand("selectWindow", $listbuild(windowID,))
]]></Implementation>
</Method>

<Method name="SelectFrame">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Selects a frame within the current window.  (You may invoke this command
        multiple times to select nested frames.)  To select the parent frame, use
        "relative=parent" as a locator; to select the top frame, use "relative=top".
        
        You may also use a DOM expression to identify the frame you want directly,
        like this: ``dom=frames$listbuild("main").frames$listbuild("subframe")``
        
        
        'locator' is an element locator identifying a frame or iframe
        /*/
        quit ..DoCommand("selectFrame", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="GetLogMessages">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Return the contents of the log.
        
        This is a placeholder intended to make the code generator make this API
        available to clients.  The selenium server will intercept this call, however,
        and return its recordkeeping of log messages since the last call to this API.
        Thus this code in JavaScript will never be called.
        The reason I opted for a servercentric solution is to be able to support
        multiple frames served from different domains, which would break a
        centralized JavaScript logging mechanism under some conditions.
        
        
        /*/
        quit ..GetString("getLogMessages", $listbuild())
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*

Слишком длинные методы!

Method GetWhetherThisFrameMatchFrameExpression(currentFrameString,target) As %String {
        Determine whether current/locator identify the frame containing this running code.
        
        This is useful in proxy injection mode, where this code runs in every
        browser frame and window, and sometimes the selenium server needs to identify
        the "current" frame.  In this case, when the test calls selectFrame, this
        routine is called for each frame to figure out which one has been selected.
        The selected frame will return true, while all others will return false.
        
        
        'currentFrameString' is starting frame
        'target' is new frame (which might be relative to the current one)

        quit ..GetBoolean("getWhetherThisFrameMatchFrameExpression", $listbuild(currentFrameString,target,))}


Method GetWhetherThisWindowMatchWindowExpression(currentWindowString,target) As %String {

        Determine whether currentWindowString plus target identify the window containing this running code.
        
        This is useful in proxy injection mode, where this code runs in every
        browser frame and window, and sometimes the selenium server needs to identify
        the "current" window.  In this case, when the test calls selectWindow, this
        routine is called for each window to figure out which one has been selected.
        The selected window will return true, while all others will return false.
        
        
        'currentWindowString' is starting window
        'target' is new window (which might be relative to the current one, e.g., "_parent")

        quit ..GetBoolean("getWhetherThisWindowMatchWindowExpression", $listbuild(currentWindowString,target,))}

*/
]]></Content>
</UDLText>

<Method name="WaitForPopUp">
<FormalSpec>windowID,timeout</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Waits for a popup window to appear and load up.
        
        'windowID' is the JavaScript window ID of the window that will appear
        'timeout' is a timeout in milliseconds, after which the action will return with an error
        /*/
        quit ..DoCommand("waitForPopUp", $listbuild(windowID,timeout,))
]]></Implementation>
</Method>

<Method name="ChooseCancelOnNextConfirmation">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        By default, Selenium's overridden window.confirm() function will
        return true, as if the user had manually clicked OK.  After running
        this command, the next call to confirm() will return false, as if
        the user had clicked Cancel.
        
        /*/
        quit ..DoCommand("chooseCancelOnNextConfirmation", $listbuild())
]]></Implementation>
</Method>

<Method name="AnswerOnNextPrompt">
<FormalSpec>answer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Instructs Selenium to return the specified answer string in response to
        the next JavaScript prompt $listbuild(window.prompt()).
        
        'answer' is the answer to give in response to the prompt pop-up
        /*/
        quit ..DoCommand("answerOnNextPrompt", $listbuild(answer,))
]]></Implementation>
</Method>

<Method name="GoBack">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates the user clicking the "back" button on their browser.
        
        /*/
        quit ..DoCommand("goBack", $listbuild())
]]></Implementation>
</Method>

<Method name="Refresh">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates the user clicking the "Refresh" button on their browser.
        
        /*/
        quit ..DoCommand("refresh", $listbuild())
]]></Implementation>
</Method>

<Method name="Close">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Simulates the user clicking the "close" button in the titlebar of a popup
        window or tab.
        
        /*/
        quit ..DoCommand("close", $listbuild())
]]></Implementation>
</Method>

<Method name="IsAlertPresent">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Has an alert occurred?
        
        
        This function never throws an exception
        
        
        
        /*/
        quit ..GetBoolean("isAlertPresent", $listbuild())
]]></Implementation>
</Method>

<Method name="IsPromptPresent">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Has a prompt occurred?
        
        
        This function never throws an exception
        
        
        
        /*/
        quit ..GetBoolean("isPromptPresent", $listbuild())
]]></Implementation>
</Method>

<Method name="IsConfirmationPresent">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Has confirm() been called?
        
        
        This function never throws an exception
        
        
        
        /*/
        quit ..GetBoolean("isConfirmationPresent", $listbuild())
]]></Implementation>
</Method>

<Method name="GetAlert">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts.
        
        Getting an alert has the same effect as manually clicking OK. If an
        alert is generated but you do not get/verify it, the next Selenium action
        will fail.
        NOTE: under Selenium, JavaScript alerts will NOT pop up a visible alert
        dialog.
        NOTE: Selenium does NOT support JavaScript alerts that are generated in a
        page's onload() event handler. In this case a visible dialog WILL be
        generated and Selenium will hang until someone manually clicks OK.
        
        
        /*/
        quit ..GetString("getAlert", $listbuild())
]]></Implementation>
</Method>

<Method name="GetConfirmation">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Retrieves the message of a JavaScript confirmation dialog generated during
        the previous action.
        
        
        By default, the confirm function will return true, having the same effect
        as manually clicking OK. This can be changed by prior execution of the
        chooseCancelOnNextConfirmation command. If an confirmation is generated
        but you do not get/verify it, the next Selenium action will fail.
        
        
        NOTE: under Selenium, JavaScript confirmations will NOT pop up a visible
        dialog.
        
        
        NOTE: Selenium does NOT support JavaScript confirmations that are
        generated in a page's onload() event handler. In this case a visible
        dialog WILL be generated and Selenium will hang until you manually click
        OK.
        
        
        
        /*/
        quit ..GetString("getConfirmation", $listbuild())
]]></Implementation>
</Method>

<Method name="GetPrompt">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Retrieves the message of a JavaScript question prompt dialog generated during
        the previous action.
        
        Successful handling of the prompt requires prior execution of the
        answerOnNextPrompt command. If a prompt is generated but you
        do not get/verify it, the next Selenium action will fail.
        NOTE: under Selenium, JavaScript prompts will NOT pop up a visible
        dialog.
        NOTE: Selenium does NOT support JavaScript prompts that are generated in a
        page's onload() event handler. In this case a visible dialog WILL be
        generated and Selenium will hang until someone manually clicks OK.
        
        
        /*/
        quit ..GetString("getPrompt", $listbuild())
]]></Implementation>
</Method>

<Method name="GetLocation">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets the absolute URL of the current page.
        
        /*/
        quit ..GetString("getLocation", $listbuild())
]]></Implementation>
</Method>

<Method name="GetTitle">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets the title of the current page.
        
        /*/
        quit ..GetString("getTitle", $listbuild())
]]></Implementation>
</Method>

<Method name="GetBodyText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets the entire text of the page.
        
        /*/
        quit ..GetString("getBodyText", $listbuild())
]]></Implementation>
</Method>

<Method name="GetValue">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter).
        For checkbox/radio elements, the value will be "on" or "off" depending on
        whether the element is checked or not.
        
        'locator' is an element locator
        /*/
        quit ..GetString("getValue", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="GetText">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets the text of an element. This works for any element that contains
        text. This command uses either the textContent (Mozilla-like browsers) or
        the innerText (IE-like browsers) of the element, which is the rendered
        text shown to the user.
        
        'locator' is an element locator
        /*/
        quit ..GetString("getText", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="GetEval">
<FormalSpec>script</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets the result of evaluating the specified JavaScript snippet.  The snippet may
        have multiple lines, but only the result of the last line will be returned.
        
        Note that, by default, the snippet will run in the context of the "selenium"
        object it so ``this`` will refer to the Selenium object, and ``window`` will
        refer to the top-level runner test window, not the window of your application.
        If you need a reference to the window of your application, you can refer
        to ``this.browserbot.getCurrentWindow()`` and if you need to use
        a locator to refer to a single element in your application page, you can
        use ``this.page().findElement("foo")`` where "foo" is your locator.
        
        
        'script' is the JavaScript snippet to run
        /*/
        quit ..GetString("getEval", $listbuild(script,))
]]></Implementation>
</Method>

<Method name="IsChecked">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets whether a toggle-button (checkbox/radio) is checked.  Fails if the specified element doesn't exist or isn't a toggle-button.
        
        'locator' is an element locator pointing to a checkbox or radio button
        /*/
        quit ..GetBoolean("isChecked", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="GetTable">
<FormalSpec>tableCellAddress</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets the text from a cell of a table. The cellAddress syntax
        tableLocator.row.column, where row and column start at 0.
        
        'tableCellAddress' is a cell address, e.g. "foo.1.4"
        /*/
        quit ..GetString("getTable", $listbuild(tableCellAddress,))
]]></Implementation>
</Method>

<Method name="GetSelectedLabels">
<FormalSpec>selectLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets all option labels (visible text) for selected options in the specified select or multi-select element.
        
        'selectLocator' is an element locator identifying a drop-down menu
        /*/
        quit ..GetStringList("getSelectedLabels", $listbuild(selectLocator,))
]]></Implementation>
</Method>

<Method name="GetSelectedLabel">
<FormalSpec>selectLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets option label (visible text) for selected option in the specified select element.
        
        'selectLocator' is an element locator identifying a drop-down menu
        /*/
        quit ..GetString("getSelectedLabel", $listbuild(selectLocator,))
]]></Implementation>
</Method>

<Method name="GetSelectedValues">
<FormalSpec>selectLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets all option values (value attributes) for selected options in the specified select or multi-select element.
        
        'selectLocator' is an element locator identifying a drop-down menu
        /*/
        quit ..GetStringList("getSelectedValues", $listbuild(selectLocator,))
]]></Implementation>
</Method>

<Method name="GetSelectedValue">
<FormalSpec>selectLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets option value (value attribute) for selected option in the specified select element.
        
        'selectLocator' is an element locator identifying a drop-down menu
        /*/
        quit ..GetString("getSelectedValue", $listbuild(selectLocator,))
]]></Implementation>
</Method>

<Method name="GetSelectedIndexes">
<FormalSpec>selectLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element.
        
        'selectLocator' is an element locator identifying a drop-down menu
        /*/
        quit ..GetStringList("getSelectedIndexes", $listbuild(selectLocator,))
]]></Implementation>
</Method>

<Method name="GetSelectedIndex">
<FormalSpec>selectLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets option index (option number, starting at 0) for selected option in the specified select element.
        
        'selectLocator' is an element locator identifying a drop-down menu
        /*/
        quit ..GetString("getSelectedIndex", $listbuild(selectLocator,))
]]></Implementation>
</Method>

<Method name="GetSelectedIds">
<FormalSpec>selectLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets all option element IDs for selected options in the specified select or multi-select element.
        
        'selectLocator' is an element locator identifying a drop-down menu
        /*/
        quit ..GetStringList("getSelectedIds", $listbuild(selectLocator,))
]]></Implementation>
</Method>

<Method name="GetSelectedId">
<FormalSpec>selectLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets option element ID for selected option in the specified select element.
        
        'selectLocator' is an element locator identifying a drop-down menu
        /*/
        quit ..GetString("getSelectedId", $listbuild(selectLocator,))
]]></Implementation>
</Method>

<Method name="IsSomethingSelected">
<FormalSpec>selectLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Determines whether some option in a drop-down menu is selected.
        
        'selectLocator' is an element locator identifying a drop-down menu
        /*/
        quit ..GetBoolean("isSomethingSelected", $listbuild(selectLocator,))
]]></Implementation>
</Method>

<Method name="GetSelectOptions">
<FormalSpec>selectLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets all option labels in the specified select drop-down.
        
        'selectLocator' is an element locator identifying a drop-down menu
        /*/
        quit ..GetStringList("getSelectOptions", $listbuild(selectLocator,))
]]></Implementation>
</Method>

<Method name="GetAttribute">
<FormalSpec>attributeLocator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gets the value of an element attribute.
        
        'attributeLocator' is an element locator followed by an
        /*/
        quit ..GetString("getAttribute", $listbuild(attributeLocator,))
]]></Implementation>
</Method>

<Method name="IsTextPresent">
<FormalSpec>pattern</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.
        
        'pattern' is a pattern to match with the text of the page
        /*/
        quit ..GetBoolean("isTextPresent", $listbuild(pattern,))
]]></Implementation>
</Method>

<Method name="IsElementPresent">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Verifies that the specified element is somewhere on the page.
        
        'locator' is an element locator
        /*/
        quit ..GetBoolean("isElementPresent", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="IsVisible">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Determines if the specified element is visible. An
        element can be rendered invisible by setting the CSS "visibility"
        property to "hidden", or the "display" property to "none", either for the
        element itself or one if its ancestors.  This method will fail if
        the element is not present.
        
        'locator' is an element locator
        /*/
        quit ..GetBoolean("isVisible", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="IsEditable">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Determines whether the specified input element is editable, ie hasn't been disabled.
        This method will fail if the specified element isn't an input element.
        
        'locator' is an element locator
        /*/
        quit ..GetBoolean("isEditable", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="GetAllButtons">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Returns the IDs of all buttons on the page.
        
        If a given button has no ID, it will appear as "" in this array.
        
        
        /*/
        quit ..GetStringList("getAllButtons", $listbuild())
]]></Implementation>
</Method>

<Method name="GetAllLinks">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Returns the IDs of all links on the page.
        
        If a given link has no ID, it will appear as "" in this array.
        
        
        /*/
        quit ..GetStringList("getAllLinks", $listbuild())
]]></Implementation>
</Method>

<Method name="GetAllFields">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Returns the IDs of all input fields on the page.
        
        If a given field has no ID, it will appear as "" in this array.
        
        
        /*/
        quit ..GetStringList("getAllFields", $listbuild())
]]></Implementation>
</Method>

<Method name="GetAttributeFromAllWindows">
<FormalSpec>attributeName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Returns every instance of some attribute from all known windows.
        
        'attributeName' is name of an attribute on the windows
        /*/
        quit ..GetStringList("getAttributeFromAllWindows", $listbuild(attributeName,))
]]></Implementation>
</Method>

<Method name="Dragdrop">
<FormalSpec>locator,movementsString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        deprecated - use dragAndDrop instead
        
        'locator' is an element locator
        'movementsString' is offset in pixels from the current location to which the element should be moved, e.g., "+70,-300"
        /*/
        quit ..DoCommand("dragdrop", $listbuild(locator,movementsString,))
]]></Implementation>
</Method>

<Method name="DragAndDrop">
<FormalSpec>locator,movementsString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Drags an element a certain distance and then drops it
        
        'locator' is an element locator
        'movementsString' is offset in pixels from the current location to which the element should be moved, e.g., "+70,-300"
        /*/
        quit ..DoCommand("dragAndDrop", $listbuild(locator,movementsString,))
]]></Implementation>
</Method>

<Method name="DragAndDropToObject">
<FormalSpec>locatorOfObjectToBeDragged,locatorOfDragDestinationObject</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Drags an element and drops it on another element
        
        'locatorOfObjectToBeDragged' is an element to be dragged
        'locatorOfDragDestinationObject' is an element whose location (i.e., whose top left corner) will be the point where locatorOfObjectToBeDragged  is dropped
        /*/
        quit ..DoCommand("dragAndDropToObject", $listbuild(locatorOfObjectToBeDragged,locatorOfDragDestinationObject,))
]]></Implementation>
</Method>

<Method name="WindowFocus">
<FormalSpec>windowName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Gives focus to a window
        
        'windowName' is name of the window to be given focus
        /*/
        quit ..DoCommand("windowFocus", $listbuild(windowName,))
]]></Implementation>
</Method>

<Method name="WindowMaximize">
<FormalSpec>windowName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Resize window to take up the entire screen
        
        'windowName' is name of the window to be enlarged
        /*/
        quit ..DoCommand("windowMaximize", $listbuild(windowName,))
]]></Implementation>
</Method>

<Method name="GetAllWindowIds">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Returns the IDs of all windows that the browser knows about.
        
        /*/
        quit ..GetStringList("getAllWindowIds", $listbuild())
]]></Implementation>
</Method>

<Method name="GetAllWindowNames">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Returns the names of all windows that the browser knows about.
        
        /*/
        quit ..GetStringList("getAllWindowNames", $listbuild())
]]></Implementation>
</Method>

<Method name="GetAllWindowTitles">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Returns the titles of all windows that the browser knows about.
        
        /*/
        quit ..GetStringList("getAllWindowTitles", $listbuild())
]]></Implementation>
</Method>

<Method name="GetHtmlSource">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Returns the entire HTML source between the opening and
        closing "html" tags.
        
        /*/
        quit ..GetString("getHtmlSource", $listbuild())
]]></Implementation>
</Method>

<Method name="SetCursorPosition">
<FormalSpec>locator,position</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Moves the text cursor to the specified position in the given input element or textarea.
        This method will fail if the specified element isn't an input element or textarea.
        
        'locator' is an element locator pointing to an input element or textarea
        'position' is the numerical position of the cursor in the field; position should be 0 to move the position to the beginning of the field.  You can also set the cursor to -1 to move it to the end of the field.
        /*/
        quit ..DoCommand("setCursorPosition", $listbuild(locator,position,))
]]></Implementation>
</Method>

<Method name="GetElementIndex">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Get the relative index of an element to its parent (starting from 0). The comment node and empty text node
        will be ignored.
        
        'locator' is an element locator pointing to an element
        /*/
        quit ..GetString("getElementIndex", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="IsOrdered">
<FormalSpec>locator1,locator2</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Check if these two elements have same parent and are ordered. Two same elements will
        not be considered ordered.
        
        'locator1' is an element locator pointing to the first element
        'locator2' is an element locator pointing to the second element
        /*/
        quit ..GetBoolean("isOrdered", $listbuild(locator1,locator2,))
]]></Implementation>
</Method>

<Method name="GetElementPositionLeft">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Retrieves the horizontal position of an element
        
        'locator' is an element locator pointing to an element OR an element itself
        /*/
        quit ..GetString("getElementPositionLeft", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="GetElementPositionTop">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Retrieves the vertical position of an element
        
        'locator' is an element locator pointing to an element OR an element itself
        /*/
        quit ..GetString("getElementPositionTop", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="GetElementWidth">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Retrieves the width of an element
        
        'locator' is an element locator pointing to an element
        /*/
        quit ..GetString("getElementWidth", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="GetElementHeight">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Retrieves the height of an element
        
        'locator' is an element locator pointing to an element
        /*/
        quit ..GetString("getElementHeight", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="GetCursorPosition">
<FormalSpec>locator</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers.
        
        Specifically, if the cursor/selection has been cleared by JavaScript, this command will tend to
        return the position of the last location of the cursor, even though the cursor is now gone from the page.  This is filed as SEL-243.
        
        This method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element.
        
        'locator' is an element locator pointing to an input element or textarea
        /*/
        quit ..GetString("getCursorPosition", $listbuild(locator,))
]]></Implementation>
</Method>

<Method name="SetContext">
<FormalSpec>context,logLevelThreshold</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Writes a message to the status bar and adds a note to the browser-side
        log.
        
        If logLevelThreshold is specified, set the threshold for logging
        to that level (debug, info, warn, error).
        (Note that the browser-side logs will \ *not* be sent back to the
        server, and are invisible to the Client Driver.)
        
        
        'context' is the message to be sent to the browser
        'logLevelThreshold' is one of "debug", "info", "warn", "error", sets the threshold for browser-side logging
        /*/
        quit ..DoCommand("setContext", $listbuild(context,logLevelThreshold,))
]]></Implementation>
</Method>

<Method name="GetExpression">
<FormalSpec>expression</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Returns the specified expression.
        
        This is useful because of JavaScript preprocessing.
        It is used to generate commands like assertExpression and waitForExpression.
        
        
        'expression' is the value to return
        /*/
        quit ..GetString("getExpression", $listbuild(expression,))
]]></Implementation>
</Method>

<Method name="WaitForCondition">
<FormalSpec>script,timeout</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Runs the specified JavaScript snippet repeatedly until it evaluates to "true".
        The snippet may have multiple lines, but only the result of the last line
        will be considered.
        
        Note that, by default, the snippet will be run in the runner's test window, not in the window
        of your application.  To get the window of your application, you can use
        the JavaScript snippet ``selenium.browserbot.getCurrentWindow()``, and then
        run your JavaScript in there
        
        
        'script' is the JavaScript snippet to run
        'timeout' is a timeout in milliseconds, after which this command will return with an error
        /*/
        quit ..DoCommand("waitForCondition", $listbuild(script,timeout,))
]]></Implementation>
</Method>

<Method name="SetTimeout">
<FormalSpec>timeout</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Specifies the amount of time that Selenium will wait for actions to complete.
        
        Actions that require waiting include "open" and the "waitFor*" actions.
        
        The default timeout is 30 seconds.
        
        'timeout' is a timeout in milliseconds, after which the action will return with an error
        /*/
        quit ..DoCommand("setTimeout", $listbuild(timeout,))
]]></Implementation>
</Method>

<Method name="WaitForPageToLoad">
<FormalSpec>timeout</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Waits for a new page to load.
        
        You can use this command instead of the "AndWait" suffixes, "clickAndWait", "selectAndWait", "typeAndWait" etc.
        (which are only available in the JS API).
        Selenium constantly keeps track of new pages loading, and sets a "newPageLoaded"
        flag when it first notices a page load.  Running any other Selenium command after
        turns the flag to false.  Hence, if you want to wait for a page to load, you must
        wait immediately after a Selenium command that caused a page-load.
        
        
        'timeout' is a timeout in milliseconds, after which this command will return with an error
        /*/
        quit ..DoCommand("waitForPageToLoad", $listbuild(timeout,))
]]></Implementation>
</Method>

<Method name="GetCookie">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Return all cookies of the current page under test.
        
        /*/
        quit ..GetString("getCookie", $listbuild())
]]></Implementation>
</Method>

<Method name="CreateCookie">
<FormalSpec>nameValuePair,optionsString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Create a new cookie whose path and domain are same with those of current page
        under test, unless you specified a path for this cookie explicitly.
        
        'nameValuePair' is name and value of the cookie in a format "name=value"
        'optionsString' is options for the cookie. Currently supported options include 'path' and 'max_age'.      the optionsString's format is "path=/path/, max_age=60". The order of options are irrelevant, the unit      of the value of 'max_age' is second.
        /*/
        quit ..DoCommand("createCookie", $listbuild(nameValuePair,optionsString,))
]]></Implementation>
</Method>

<Method name="DeleteCookie">
<FormalSpec>name,path</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        /*/
        Delete a named cookie with specified path.
        
        'name' is the name of the cookie to be deleted
        'path' is the path property of the cookie to be deleted
        /*/
        quit ..DoCommand("deleteCookie", $listbuild(name,path,))
]]></Implementation>
</Method>
</Class>
</Export>
