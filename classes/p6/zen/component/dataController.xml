<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="21">
<Class name="p6.zen.component.dataController">
<Description>
Controller with ability to extract and place objects</Description>
<Super>%ZEN.Auxiliary.dataController</Super>
<TimeCreated>60900,45717.754325</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
This is the XML namespace for this component.</Description>
<Default>http://www.dimas.ru/p6</Default>
</Parameter>

<Method name="GetObject">
<Description>
Get Object from model</Description>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set tModelId = $$$ZENVAL(..modelId)
	
	if $IsObject(..%model) quit ..%model

	#; open instance of model
	Set tModel = ..%CreateModelInstance($$$ZENVAL(..modelClass),tModelId,.tSC)
	If $$$ISERR(tSC) Quit

	#; copy data to model
	If $IsObject(tModel)&&..dataLoaded {
		Set tSC = ..dataBag.%CopyToModel(tModel)
		If $$$ISERR(tSC) Quit
	}

	quit tModel
]]></Implementation>
</Method>

<Method name="SetObject">
<Description>
Set Object</Description>
<FormalSpec>aObject:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	#; copy data to model
	If $IsObject(aObject) {
		set ..%model=aObject
		if aObject.%IsA("%Library.Persistent") set ..modelId=aObject.%Id()
		Set tSC = ..dataBag.%CopyFromModel(aObject)
		If $$$ISERR(tSC) Quit
	}

	quit tSC
]]></Implementation>
</Method>

<Method name="DumpBag">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d $system.OBJ.Dump(..dataBag)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="%DeleteModelInstance">
<Description>
Delete an instance of a DataModel object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String,pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tModel = ""
	Set tSC = $$$OK
	Set $ZT="Trap"
	If (pClass '= "") {
		Set tSC = $zobjclassmethod(pClass,"%DeleteModel",pID)
	}
Done
	Quit tSC
Trap
	Set $ZT=""
	If $ZE["<METHOD DOES NOT EXIST>" {
		Set tSC=$$$ERROR($$$GeneralError,"Class "_ pClass _ " is not a DataModel")
	}
	Else {
		Set tSC=$$$ERROR($$$CacheError,"%DeleteModelInstance: " _ $ZE)
	}
	Goto Done
]]></Implementation>
</Method>

<Method name="deleteId">
<Description>
Ask our associated dataModel to delete the item with the given id.</Description>
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[
	// call server to delete data
	var ok = this.DeleteFromServer(id);
	if (ok) {
		// test for delete of this object
		if (this.modelId == id) {
			this.modelId = '';
			this.sendEventToViews('dataChange');
		}

		zenInvokeCallbackMethod(this.ondelete,this,'ondelete','id',id);
	}
	return ok;
]]></Implementation>
</Method>

<Method name="DeleteFromServer">
<Description><![CDATA[
Internal method.<br>
Ask the associated DataModel object to delete the given item.]]></Description>
<Internal>1</Internal>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set tOK = 1

	Do {
		#; delete instance of model
		Set tSC = ..%DeleteModelInstance($$$ZENVAL(..modelClass),pID)
		If $$$ISERR(tSC) { Set tOK = 0 Quit }
	} While(0)

	If $$$ISERR(tSC) {
		Do ##class(p6.CspMethods).DisplayErrorJS(%this,tSC)
	}
	
	Quit tOK
]]></Implementation>
</Method>

<Method name="SaveToServer">
<Description><![CDATA[
Internal method.<br>
Save data back to the associated DataModel object.
Returns the id of the saved object (which could have changed
in the case of an insert).]]></Description>
<Internal>1</Internal>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set tModelId = $$$ZENVAL(..modelId)
	Set tRet = tModelId

	Do {
		#; open instance of model
		Set tModel = ..%CreateModelInstance($$$ZENVAL(..modelClass),tModelId,.tSC)
		If $$$ISERR(tSC) Quit

		#; copy data to model and save model
		If $IsObject(tModel) {
			Set tSC = ..dataBag.%CopyToModel(tModel)
			If $$$ISERR(tSC) Quit

			#; save the model
			Set tSC = tModel.%SaveModel()
			If $$$ISERR(tSC) Quit

			#; model may have been modified by the save
			#; so copy new values back to client
			Set tSC = ..dataBag.%CopyFromModel(tModel)
			If $$$ISERR(tSC) Quit

			#; return the modelId (it could have changed)
			Set tRet = tModel.%id
		}
	} While(0)

	If $$$ISERR(tSC) {
		Do ##class(p6.CspMethods).DisplayErrorJS(%this,tSC)
		s tRet=""
	}
	Quit tRet
]]></Implementation>
</Method>
</Class>
</Export>
